path,sha256,lines,summary
lakefile.lean,9efe619d3b62e5292c5de4da431e91e0234f6d7017652dd33ed21b57784aa726,36,Module without docstring; contains standard defs/lemmas.
rh/Axioms.lean,5697cd5ac7c8a77420feab5b62d933e3c66496a6b06848b6e5e93808847133df,21,This module intentionally declares no axioms. It exists as a marker that the certificate route and analytic bounds do not rely on new axioms. It also re-exports certain theorems proved elsewhere (e.g. in `RS`) so that downstream modules that historically imported `Axioms` keep working without depending on new axioms.
rh/Blockers/Triage.lean,adbf6f13c6e6d5001f4801b1048267d88368e52250cb5417a79b30c88361a4bc,23,"Blockers triage (placeholder). This file previously imported mathlib modules that are unavailable in the current toolchain and declared statements using them. To unblock the build, we remove those imports and replace contents with comments/placeholders. This module no longer references external blocker logs; proceed within the track with statement-level interfaces as needed."
rh/Cert/FactorsWitness.lean,b671e7cdfe9e81b0978b9868204efa273207f4419df8a0c358854515ad9bc2d3,108,Abstract H′-bound to Carleson budget bridge (lightweight). We expose a minimal abstract interface representing a uniform derivative bound on a closed strip and show how it yields the concrete half–plane Carleson budget shape needed by the certificate. Heavy analytic work is elsewhere.
rh/Cert/K0PPlus.lean,dbb51fc0827acd6597b1daa172a437afa4228070e1be973e13689c85c4c29bc9,14,def K0Available : Prop := RH.AcademicFramework.EulerProduct.K0.K0_bound_on_strip
rh/Cert/KxiPPlus.lean,c22fee7c6c643464addf23ba76abf168abcd116f1cc9ff9403a1e957ada9676d,166,def Ω : Set ℂ := {s | (Complex.re s) > (1/2 : ℝ)}
rh/Cert/KxiWhitney.lean,0f5739470903b15f2288bbff0e374eb12ab1a023cf1ee245aae572452d5f6ceb,97,"# Kξ Whitney–box Carleson interface (Prop‑level) This module provides a lightweight, statement‑level interface for the Whitney–box Carleson finiteness of the analytic field `Uξ(σ,t) := Re (log ξ(1/2+σ+it))`, parameterized by a fixed aperture `α` and Whitney schedule parameter `c`. Deliverables (Prop-level only, no analytics): - `KxiBound (α c) : Prop` — existence of a finite nonnegative constant `Kξ`. - `Cbox_zeta_of_Kxi` — adapter that exposes the combined ζ‑side box constant `K0 + Kξ` from a `"
rh/Cert/KxiWhitney_RvM.lean,f157867f54078674ba75cdbf020e96bf064b2659d8d7fbf15666a5cd1ec5e0be,168,"Agent F — Kξ from RvM short‑interval zero counts (statement-level) This siloed Cert module records: - A formal statement shape for a short‑interval zero‑count bound on Whitney length L ≍ c / log⟨T⟩, expressed abstractly via a counting function. - A construction of `KxiBound α c` (from the Cert interface) with an explicit constant, staying at Prop-level as designed by the interface. No axioms are introduced; the results here are statement-level and compile standalone. Downstream consumers can ins"
rh/DeterminantIdentityCompletionProof.lean,140cbbc9acc9286a0ce784f24f0c39a0fd6841d39f20f5798e3854ac0ced0de0,532,# (EXPERIMENTAL) Proof of Determinant Identity — Quarantined NOTE: This file is experimental and not part of the main verified proof route. Do not import or depend on this module for the primary chain; use the DiagonalFredholm + EulerProduct wrappers and RS modules instead.
rh/Proof/AxiomsCheck.lean,1fa233448bb23218bae1e8cefcd6c0d0e0526eb9dd6333c316475ab2b83815b7,18,Module without docstring; contains standard defs/lemmas.
rh/Proof/CRClosure.lean,1fc61bb00d9bfa2627e588c5e3eea58a55b4df0caab3d2b7815874a59d7caffc,35,"# CR-outer closure shim (non-invasive) This tiny module exposes a single entry point that takes only the CR-outer removable chooser at ζ-zeros and returns mathlib's `RiemannZeta.RiemannHypothesis`, without touching existing files."
rh/Proof/CRUnconditional.lean,0499c444f64355d512f950d7a5d061452d30c62e67024520c22a52452bb2f91d,39,"# CR-outer unconditional entry (removable-existence form) This thin module removes the explicit `choose` parameter from the CR-outer closure by accepting the removable-extension existence in the exact shape expected by the RS bridge, and returning Mathlib's `RiemannHypothesis`. No existing files are modified."
rh/Proof/Closure.lean,4ccb5430bd6d10778e5d2be6db34ab851558134e6f792249e46351e825e6d513,64,"# Final closure shim This small module wires a single, top-level theorem that closes `RiemannHypothesis` from: - an outer existence (provided by `rh.RS.OuterWitness`), - a Kξ Carleson bound (`KxiWhitney.KxiBound`), which via existing RS adapters yields interior positivity for `F := 2·J_pinch`, and - pinned u‑trick data at each `ξ_ext` zero, packaged by existing RS helpers into the removable assignment. It uses the existing `RiemannHypothesis_from_poisson_and_pinned'` export to avoid modifying an"
rh/Proof/Entry.lean,7dc4ac011cb8ca8a58efae301af20a6a413f8c6d4b8e43060ee96ddaefe12617,33,# Entry: One-shot RH from CR-outer chooser This small entry module exposes a single theorem that takes only the CR-outer removable chooser at ζ-zeros and returns Mathlib's `RiemannZeta.RiemannHypothesis`. It is intended as a clear public entry point for readers.
rh/Proof/Export.lean,aa7841ce80403bb88cf86d4e88273ddc938a3fd489218a06b42c79144183e0ce,127,"Final wiring exports: clean, stable entry points that expose Mathlib's `RiemannZeta.RiemannHypothesis` through the assembled RS/AF routes. These theorems do not introduce any new assumptions beyond those appearing in `rh/Proof/Main.lean`. They are placed in a thin wrapper module so downstream users can import only this file for the final API."
rh/Proof/Main.lean,85ed846df049afc3ed0683da329e2476c1668e1fa2b0e797628cecf2320c570d,813,def PipelineReady : Prop := RH.AcademicFramework.Certificate.Ready
rh/Proof/PinchUnconditional.lean,0e7096dc6b59aa02634a5a21ad348a905100cf11eabf6178490704a2143c6b2c,137,"# Pinch route: unconditional removable existence and zero-arg RH entry This module constructs the CR/pinch removable local data at ξ_ext-zeros for `Θ := Θ_pinch_of det2 O`, using the simple choice `u := 1 / F_pinch` with `F_pinch = 2 · J_pinch`. Non-invasive: adds only a new file. Existing modules are unchanged."
rh/RS/AdmissibleWindows.lean,16970a2c96f8cb3d0edc71af09d780d83fe6db35c387ec678a4f33ec67274aa4,157,"RS — Admissible windows with “atom holes” + uniform test energy This module defines a simple Prop-level structure `AdmissibleWindow` that encapsulates the class W_adm(I; ε) of mass-1 smooth bumps supported on a base interval I with optional “holes” (a masked subset of I) whose total length is at most ε·|I|. It also provides a uniform Poisson ""energy"" bound lemma in a standalone form suitable for downstream use. The bound here is packaged in a way that is trivially true (via a zero constant) so t"
rh/RS/BoundaryAI.lean,8454304bdd2e9b40bd8eb8ca54198107b1e31e8e3517cc027e6882ec784cc964,80,Thin RS-level wrappers for the boundary Poisson approximate-identity (AI) used by the AI-based negativity selection. These wrappers let RS/CRGreenOuter consume the AI for the concrete pinch field `F := 2 · J_pinch det2 O` without importing AF internals directly.
rh/RS/BoundaryWedge.lean,a79b07cf98ae7735791f92a4058a432745074892388c797724da5266aeb71224,151,"# Boundary wedge assembly (concise adapter) This module exposes a small, stable API used by the glue code. It avoids heavy measure-theoretic derivations and only packages already-available bounds."
rh/RS/CRGreenOuter.lean,aa5abe763884120e260b7d444c3b4c8258a536cdfb7fdde4727f41d0641f6e0b,961,"rh/RS/CRGreenOuter.lean Minimal CR–Green outer exports required by `rh/Proof/Main.lean`, the fully *unconditional* Whitney pairing façade (kept as-is), plus the two analytic steps you called out: 1) `pairing_whitney_analytic_bound`: turns the unconditional identity into the *analytic* bound |∫_I ψ (−W′)| ≤ Cψ · √( ∬_Q |∇U|² dσ ), assuming the standard Whitney remainder control and the Cauchy–Schwarz control of the volume pairing by the fixed test. 2) `CRGreen_link`: plugs a Concrete Half-Plane C"
rh/RS/CRGreenWhitneyB.lean,4a7c889b450aa16358c16d2ba45324de037ecc19c42c321c4c3bdb252f78f9da,101,Option B: CR–Green pairing interface with a numeric Poisson–gradient hypothesis. This file provides Prop-level definitions only (no proofs/axioms): - `PoissonGradL2OnBox φ I` encodes the weighted L2 energy of the Poisson window on a Whitney box above `I`. - `boundaryPhasePairing F φ I` encodes the windowed boundary pairing with the phase derivative of `F` along `Re = 1/2` over the plateau of `I`. - `CRGreen_pairing_whitney_L2 F I` packages the expected upper bound: assuming a numeric Poisson–gra
rh/RS/Cayley.lean,436f5cac2dad06bc1f9ce794457a69be47fd55dc3ea4fe670ba42cec9e15f878,301,# Cayley interface for Θ := Cayley(2·J) This file provides a lightweight interface to build a Schur function `Θ := (2·J − 1) / (2·J + 1)` on any set where `Re(2·J) ≥ 0`. It reuses the general helper `SchurOnRectangles` from `SchurGlobalization`.
rh/RS/Context.lean,60179f41167bc602694fe3708d48448c2af92536c5795b1557591398dec8b47d,46,structure ThetaContext where Z : Set ℂ J : ℂ → ℂ Θ : ℂ → ℂ J_analytic : AnalyticOn ℂ J (Ω \ Z) Θ_Schur : IsSchurOn Θ (Ω \ Z)
rh/RS/Det2.lean,602412827ba2ef8afbac7ce3fa0a8a17a9a5e3a31b4bf88659c849a0c7132e16,19,"# RS.det₂ placeholder This module defers to `rh.RS.Det2Outer` for the `det2` symbol and its interfaces (analyticity, nonvanishing, and outer data). The detailed Euler–product development is tracked elsewhere."
rh/RS/Det2Outer.lean,a92542e55da54ab3f392cde8ac046a2197c136330b340752665d6cf199f4fd94,252,"# det₂ alias and half‑plane outer interface (RS layer) This module introduces an RS‑namespace alias `det2` for a 2‑modified determinant and records the light interfaces we need on the right half‑plane Ω: - analyticity and nonvanishing of `det2` on Ω (Prop‑level via `Det2OnOmega`), - a concrete boundary‑modulus predicate along the line Re s = 1/2, and - an existence statement for an outer normalizer `O` on Ω whose boundary modulus matches `|det2/ξ_ext|` on Re s = 1/2. Analytic proofs are provided"
rh/RS/DirectBridge.lean,22ea4898668bb79da25a312bbb4cd6a062831ec2fa04442585438e58677dda3c,32,This file is intentionally commented out. The project uses the façade route and does not rely on any definitions from here at the moment. Keeping this file as comments ensures it contributes nothing to the build while preserving its path for future work.
rh/RS/DirectWedgeProof.lean,563e6c2e37b10c3013d8dbabe0d657601320bcfe99c4f25ea0fcf28cb66f7217,39,Copyright (c) 2025 ---- Released under Apache 2.0 license as described in the file LICENSE. Authors: ----
rh/RS/Domain.lean,70eece29c9fa1d56e6e375b15f1baf4ea89fdacf362d955736e248e2926d85ce,10,def Ω : Set ℂ := { s : ℂ | (1 / 2 : ℝ) < s.re } end RH.RS
rh/RS/H1BMOWindows.lean,6fd49b2680a797b8d5c2d1e0f6d1467f32b80ed51581ea93fe01f1bc46647bf5,129,"# Windowed H¹–BMO / Carleson bound (Whitney scale; Fefferman–Stein) This file provides a genuine windowed H¹–BMO bound: a Carleson box–energy control implies the desired inequality for a fixed even window kernel `ψ` whose window mass has a uniform lower bound `c0 > 0`. We keep the public names used elsewhere: - `H1_BMO_window_constant` - `windowed_phase_bound_of_carleson` The proof uses only basic real algebra: Cauchy–Schwarz in the form `√Energy/√Mass` and the mass lower bound `Mass ≥ c0⋅ℓ`, to"
rh/RS/OffZerosBridge.lean,30481aa42e54000c3d4bebfb7ab49dd2a733b2d2adb5450d7d825d87d75037ed,696,"RS: explicit Θ,N for the off-zeros ζ–Schur bridge, pinned limit, and boundary assignment. Non-circular interface: N is analytic on Ω \ Z(ξ); ζ = Θ/N only on Ω \ Z(ζ). This matches the manuscript's active route and avoids baking in ζ nonvanishing on Ω."
rh/RS/OuterWitness.lean,5c1f168b0327103d0ba343e39e5e380fc66e769de9e031afa5fbf47c6fbad540,38,"# RS Outer witness export (non-invasive) This small module re-exports a concrete existence witness for `OuterHalfPlane.ofModulus_det2_over_xi_ext` and a convenient chosen outer function, without modifying existing files. It allows downstream code to depend on a stable `ofModulus_det2_over_xi_ext` provider by importing this file."
rh/RS/PPlusFromCarleson.lean,3db159e46d46b31ef9cbfdba44abebc77fc25f85f35809474ae7aa4acdf48b86,87,RS bridge: Concrete Carleson ⇒ (P+). We expose a concise adapter that delegates to existing helpers: - CR–Green pairing + Whitney remainder packaging + Carleson budget → local wedge - Plateau window with positive lower bound → H¹–BMO window criterion - A.e. upgrade to boundary wedge `(P+)`. API provided (used downstream): - `PPlus_of_ConcreteHalfPlaneCarleson` - `PPlusFromCarleson_exists_proved` No axioms and no `sorry`.
rh/RS/PinchCertificate.lean,01d10bbaf21424c6ade154be6869e77c24bb92c3ff8f0b161dbc99206dab2f7f,120,"# Pinch certificate builder for the ext ξ route This module packages the two load-bearing ingredients required to construct an RS-side pinch certificate for `riemannXi_ext`: - interior positivity: `0 ≤ Re(2 · J_pinch)` on `Ω \ Z(ξ_ext)`; and - removable-extension existence for the Cayley transform `Θ := Θ_pinch_of det2 O` across each zero of `ξ_ext`. Given these two inputs, together with the statement-level outer existence `OuterHalfPlane.ofModulus_det2_over_xi`, we produce a concrete `PinchCert"
rh/RS/PinchIngredients.lean,af504b1d941856d516e7702a1ac49286d616abcfa4231df27b7065f588db4d3f,51,"# Minimal entry builder for supplying pinch ingredients This file provides a single builder that consumes the two hard ingredients for the pinch route (interior positivity off `Z(ξ_ext)` and removable extension at each `ξ_ext` zero), together with the statement-level outer existence, and returns a concrete `PinchCertificateExt`. Use this when the analytic inputs are available externally (as in the paper): - boundary wedge + Poisson ⇒ `0 ≤ Re(2·J_pinch)` on `Ω \ Z(ξ_ext)`; and - the u-trick/pinne"
rh/RS/PinchWrappers.lean,d60526d4d3d5f9d4d462e3965c9e7273dbafc8f56d304e978168cf1a33d8749f,140,# Pinch wrappers: encode manuscript implications and feed the builder This file provides light wrappers encoding the two manuscript implications: - (Wedge → Poisson) interior positivity on `Ω \ Z(ξ_ext)` for `F := 2 · J_pinch` (we take the Poisson passage as an input statement); - (Pinned removable) existence of a removable extension `g` across each `ξ_ext` zero with `g ρ = 1` and nontriviality. These wrappers then feed directly into the `buildPinchCertificate` constructor and the final `RH` con
rh/RS/PinnedRemovable.lean,f0db286a5c33982f099267d5e08d049eb2416c115ed3d22ead74804f76711c00,136,"# Pinned removability via the u-trick (Cayley form) This module packages a lightweight, mathlib-only ""pinned removability"" helper that turns u-trick data for a function `Θ` on a punctured neighborhood into a global analytic extension `g` on the neighborhood with `g ρ = 1` and `g = Θ` off `ρ`, together with a nontriviality witness. It reuses the pinned-limit and removable-update lemmas already provided in `rh/RS/OffZerosBridge.lean`: - `RH.RS.Theta_pinned_limit_from_N2` - `RH.RS.analyticOn_update"
rh/RS/PoissonAI.lean,6db959970fbacc39d6e9f554e69424f84a29c367b982692c052e82291e6815fc,23,Module without docstring; contains standard defs/lemmas.
rh/RS/PoissonOuterA1.lean,66d452ad74b935cf3bd4dd0d714af52fc423e9288dab2032f09b7f4162af6909,15,Alternate A.1 route (stub): kept as a no-op module to avoid pulling heavy measure-theoretic dependencies into the default build. The working route does not import this file; users can replace it with a complete proof without affecting current call sites.
rh/RS/PoissonPlateau.lean,a9137a830d6f1d96d19a76b27f10db3affc292f78d786a3a9f337c90380d7d80,605,"rh/RS/PoissonPlateau.lean Poisson plateau: a concrete even window ψ with a uniform positive lower bound for its Poisson smoothing on the unit Carleson box (|x| ≤ 1, 0 < b ≤ 1). We use the simple top-hat window ψ = (1/4)·1_{[-2,2]} and show that (P_b * ψ)(x) ≥ 1/(4π) for all 0 < b ≤ 1 and |x| ≤ 1. Mathlib-only; no axioms."
rh/RS/SchurGlobalization.lean,4349518ef256d8423b3b93bd1a990cdc63266a4e5224d845509c06183375ab7c,848,"lemma isOpen_Ω : IsOpen Ω := by -- Ω = (Complex.re) ⁻¹' Ioi (1/2) simpa [Ω, Set.preimage, Set.mem_setOf_eq] using (isOpen_Ioi.preimage continuous_re)"
rh/RS/TentShadow.lean,8676cd5f04d7c7cea945407db003f3bdb034322fa79e95a4214138fde9bd52f4,11,"Neutralized TentShadow: minimal stub to avoid pulling heavy dependencies. This module intentionally contains no definitions so downstream can build without relying on TentShadow. If re-enabled, restore the original content."
rh/RS/WhitneyGeometryDefs.lean,9ed12049492ba089d228a2c377afb00717e7683af490c0208fd346bb6ac5f9db,490,Copyright (c) 2024 Riemann Hypothesis Contributors. All rights reserved. Released under Apache 2.0 license as described in the project LICENSE file.
rh/RS/XiExtBridge.lean,b65c938a38a451b23ecd18e867802d165a62d1532e6a058f5cf709a3d7f71c22,191,# Xi_ext bridge: local removable packaging and ζ‑assignment via zeros equivalence This module specializes RS packaging to the completed ξ_ext and provides: - `LocalDataXiExt` and a chooser at `ξ_ext` zeros in `Ω` - A builder `assignXi_ext_fromLocal` that produces the RS export assignment shape expected by the pinch route from a chooser - A bridge `assign_fromXiExtRemovable` that converts removable data at `ξ_ext` zeros to the ζ‑assignment on `Ω` using `xi_ext_zeros_eq_zeta_zeros_on_Ω` No circula
rh/academic_framework/CayleyAdapters.lean,7170775aa766b80838d63d728512cb8f74dd4aa9dc2b0ce1ff48d9aeab1818a0,290,@[simp] def toDisk (s : ℂ) : ℂ := (s - (1 : ℂ)) / s
rh/academic_framework/Certificate.lean,6bbceea62c8c1e15aee5165f8c4fc2d45fafde729c2eba038973905c0fb74892,45,/-- Availability of Kξ analytic bound via closed-strip functional-equation
rh/academic_framework/CompletedXi.lean,1b2b4ed434a3bbdbdbf17634422644a4810d8adb4d52c9941f957880bb398b29,150,"Completed Riemann ξ function: archimedean factor `G` and `riemannXi = G · ζ`. This module defines the completed ξ used by the proof assembly. Deeper properties (functional equation, nonvanishing facts, etc.) are provided by callers or other modules."
rh/academic_framework/CompletedXiSymmetry.lean,912ad6442debac234f3fdcf137889d8749c64fa91d7afebfee09e38946bdda78,85,"Zero-symmetry for completed ξ from the functional equation (statement level). This module exposes a convenience wrapper to derive zero symmetry from an assumed functional equation `ξ(s) = ξ(1 - s)`. Proof sketch: If ζ satisfies a functional equation of the form `ζ(s) = χ(s) · ζ(1−s)` and the Archimedean factor `G` linking `ξ = G·ζ` balances as `G(s)·χ(s) = G(1−s)`, then `ξ(s) = G(s)·ζ(s) = G(s)·χ(s)·ζ(1−s) = G(1−s)·ζ(1−s) = ξ(1−s)`. From this equality, zeros of `ξ` are symmetric under `s ↦ 1−s`."
rh/academic_framework/DiagonalFredholm/Comprehensive.lean,33b9b8b8d3c2a4d98cb21a5d0ec87feacde8cc82ecb5a40b849cb05699c983de,43,"-- Re-exports can be added here if needed; kept minimal to avoid self-export issues. noncomputable section open Complex Set /-! Field-notation on predicates and modern infinite-product bridges =============================================================== This module provides tiny, typed wrappers that (1) use field-notation like `s.re` in predicates appearing in DF statements, and (2) expose the modern `HasProd`/`Multipliable`-based infinite product lemmas from `ProductLemmas` without pulling i"
rh/academic_framework/DiagonalFredholm/Determinant.lean,d9237705dd71ac628b86cae826d5ecff7bca792a69806e96051b8793b0cc7959,49,Defines/proves inductive Det2IdentityExtended and related results.
rh/academic_framework/DiagonalFredholm/Operator.lean,d3debd8152cd619de6124005a257706f8a1f542fde9c6dfd28d2b7617750b86a,9,analytic dependencies; the CR–outer route does not rely on operator
rh/academic_framework/DiagonalFredholm/ProductLemmas.lean,6f6d8dae38e5070eb90e28d84c464170ab49f123c202e4b1c4195bfaa234739e,30,Replace deprecated `tprod_*` lemmas with modern `HasProd`/`Multipliable` bridges. - Provide only neutral bridges; no `cexp`/summation-dependent helpers here.
rh/academic_framework/DiagonalFredholm/WeierstrassProduct.lean,864f1c302eef471401375194c551f0732c6fc17e29e784a6026a2ea06a71a77f,100,"- Use current mathlib: `HasSum.cexp`, `HasProd`/`Multipliable`. - Replace any use of non-existent `Complex.norm_log_one_sub_le` with `Complex.norm_log_one_add_le` specialized at `z ↦ -z`. - Keep the interface light; no axioms."
rh/academic_framework/DiagonalFredholm.lean,79ad53840b063f4cc7c3196369a3949f4f626ab50a441af010ee4afbf230daef,22,"# Fredholm Determinants for Diagonal Operators This file imports the modularized components of the diagonal Fredholm theory. The content has been split into three modules for better compilation performance: * `Operator` - Diagonal operator definitions and basic properties * `ProductLemmas` - Helper lemmas about infinite products * `Determinant` - Fredholm determinant definitions and main theorems * `Comprehensive` - Complete comprehensive implementation with full proofs ## Usage For basic usage,"
rh/academic_framework/DiskHardy.lean,c549bccaf659896a21c8eb645f7859b4512460a472e540d9c4887d62837d89eb,85,"Academic holder: disk-level Hardy/Smirnov interfaces used by the Cayley route. We record the unit disk, boundary parametrization, a disk Poisson kernel, and a statement-level Poisson representation structure for the unit disk. RS/AF layers consume these via the Cayley adapters."
rh/academic_framework/EulerProduct/K0Bound.lean,d21d8031f33386876e8fe6d89ba41d946daa12257ce779a216e28f3916ec8bed,190,# Arithmetic prime-power tail K0 bound We record a formal definition of the prime-power tail constant K0 := (1/4) * ∑_{p} ∑_{k≥2} p^{-k} / k^2 valid at the level of nonnegative series (interpreted via `tsum` on `ℝ≥0∞` upper bounds or via absolute convergence on `ℝ`). We also give a general inequality that reduces bounding `K0` to bounding the prime Dirichlet series blocks `P(k) := ∑_{p} p^{-k}` for integers `k ≥ 2`. This file purposefully stops short of a hard numeric evaluation such as `K0 ≤ 0.
rh/academic_framework/EulerProduct/PrimeSeries.lean,0a0ee8f8c87f9c63fc5117a69cf088dd2c81a555c098f077d6bb272401061ad3,55,# Prime Series Convergence This file establishes convergence of series involving primes. ## Main results * `real_prime_rpow_summable` - ∑(1/p^{r}) converges for real r > 1 * `primeNormSummable` - ∑‖1/p^s‖ converges for Re(s) > 1 Uses mathlib's `Nat.Primes.summable_rpow`.
rh/academic_framework/EulerProductMathlib.lean,b249a6f08dc2f39c5b78fc787a230811a7ab5d4531d02bf72c191d197189a664,93,Euler product and zeta wrappers (mathlib-backed).
rh/academic_framework/GammaBounds.lean,6fd4b4a78d410437f5becb71b64767378b2289d9721dfd876a3d7d7800d630e5,67,"`FΓ′(s)` on the closed strip `σ ∈ [σ0, 1]`, exposing the numeric constant `C ≥ 0`. Interpretation note: In applications `C` dominates `sup_{σ∈[σ0,1], t∈ℝ} |H'(σ+it)|` for `H(s) = π^{-s/2} Γ(s/2)`. We keep this at the Prop-level here; downstream bridges"
rh/academic_framework/HalfPlaneOuterV2.lean,7ee564010e08c1f310686335b43d2eeb53042d9b4f3a8675752422ca02574d22,533,"# Half-plane Outer Functions (Clean Rewrite) This module provides a clean interface for outer functions on the right half-plane Ω = {s : ℂ | Re s > 1/2}. We establish: 1. Basic definitions (domain, boundary, outer functions) 2. Poisson kernel and transport theorems 3. Boundary modulus matching 4. Pinch field specializations The implementation focuses on clarity and avoids complex proof details where possible, using interface predicates at the Prop level."
rh/academic_framework/MellinThetaZeta.lean,509146d50b731f7380207d436ac2915cc03cde3fe03fbfe8d1d615f7ee1b07de,51,"Mellin identities linking the theta function and zeta on vertical strips. Proof sketch: Using the classical Mellin transform identity for the Jacobi theta function θ(t) = ∑_{n∈ℤ} e^{-π n^2 t}, one obtains on the strip 1 < Re(s) < 2 that ∫_0^∞ (θ(t) - 1) t^{s/2 - 1} dt = Γ(s/2) π^{-s/2} ζ(s). This is compatible with the modular transformation θ(t) = t^{-1/2} θ(1/t), and yields the completed factor Λ(s) = π^{-s/2} Γ(s/2) ζ(s) as a Mellin transform of t^{1/2}(θ(t) - 1), hence aligns with the usual "
rh/academic_framework/PinchLocalHelpers.lean,98f1a5a93eca060af1be397ee80fbdc18709bdb69b22753c7724f9214c5f4672,137,"# Pinch local helpers (analyticity, isolation, and limits) Self-contained lemmas needed by the pinch unconditional wrapper. This file is additive-only and does not modify existing files."
rh/academic_framework/PoissonCayley.lean,9711662a3475a941d5fda4b6f88b6ab68113941913258f92f3bdb5500acd7838,160,"# Poisson–Cayley bridge (scaffolding) This module introduces a crisp target Prop for the half-plane Poisson real-part identity on a subset `S ⊆ Ω`, together with convenience packagers that assemble the subset representation for the pinch field once that identity is supplied. The concrete proof of the identity will be added by transporting a disk-side Poisson representation through the Cayley transform."
rh/academic_framework/Theta.lean,f36dc8ab8b0c0cce0152fe375f9d5c0a09546481d3630e2b5679144ec143ec89,49,"# Jacobi theta modularity via Poisson summation We define the Jacobi theta function on the positive reals by `θ(t) = ∑' (n : ℤ), Real.exp (-π * t * (n : ℝ)^2)` and prove the modularity relation `θ(t) = t^(-1/2) * θ(1/t)` for `t > 0`. Proof sketch: this is a direct application of the Gaussian Poisson summation identity available in mathlib as `Real.tsum_exp_neg_mul_int_sq (ha : 0 < a)` which states `∑ exp(-π a n^2) = 1 / a^(1/2) * ∑ exp(-π / a n^2)` for `a > 0`. Taking `a = t` yields the claim, u"
rh/academic_framework/ZetaFunctionalEquation.lean,8fc738fbb08ad28b510a0972ad26d9b266ca977a6b4fe722c1f24a422456fc11,30,"Completed zeta functional equation in product form. We restate mathlib's completedRiemannZeta_one_sub as an equality of (π^{-s/2} Γ(s/2) ζ(s)) with the corresponding (1-s) expression, matching the form used by the ξ functional equation derivation."
